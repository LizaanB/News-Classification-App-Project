{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "50970cc3-9d32-4e78-94e5-08dfb8f4e4ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resolving ModuleNotFoundError: No module named distutils in Python 3.12 - https://www.trycatchdebug.net/news/1359504/fixing-modulenotfounderror-for-distutils-in-python-3-12\n"
     ]
    }
   ],
   "source": [
    "# Correct citation syntax\n",
    "# Assuming you have other necessary code here...\n",
    "citation_link = \"https://www.trycatchdebug.net/news/1359504/fixing-modulenotfounderror-for-distutils-in-python-3-12\"\n",
    "print(f\"Resolving ModuleNotFoundError: No module named distutils in Python 3.12 - {citation_link}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e2aa6b17-82b6-47ee-9204-536c85745f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "from setuptools import setup, find_packages\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ed12d775-d397-4f71-9934-17babfb47dbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-01-02 20:20:26.595 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.968 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\lizaa\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-01-02 20:20:26.969 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.970 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.970 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.971 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.973 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.974 Session state does not function when running a script without `streamlit run`\n",
      "2025-01-02 20:20:26.975 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.976 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.976 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.978 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.979 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.979 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.980 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.984 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.986 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.987 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.989 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.990 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.991 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.992 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.995 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.997 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.998 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:26.999 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:27.000 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:27.002 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:27.003 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:27.004 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-01-02 20:20:27.005 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "\n",
    "# Dictionary for prediction labels\n",
    "prediction_labels = {\n",
    "    'tech': 1,\n",
    "    'sport': 2,\n",
    "    'health': 3,\n",
    "    'politics': 4,\n",
    "    'entertainment': 5,\n",
    "}\n",
    "\n",
    "def load_prediction_models(model_path):\n",
    "    # Function to load models (dummy function, replace with actual implementation)\n",
    "    pass\n",
    "\n",
    "def get_article_details(url):\n",
    "    # Function to get article details from URL (dummy function, replace with actual implementation)\n",
    "    return \"Sample news article text\"\n",
    "\n",
    "def get_key(prediction, prediction_labels):\n",
    "    # Function to get key from prediction (dummy function, replace with actual implementation)\n",
    "    return \"tech\"\n",
    "\n",
    "# Main function\n",
    "def main():\n",
    "    st.title(\"News Classifier\")\n",
    "\n",
    "    # Option to choose functionality\n",
    "    choice = st.sidebar.selectbox('Choose Functionality', ['Classify News', 'NLP'])\n",
    "\n",
    "    if choice == 'Classify News':\n",
    "        st.info(\"Classify News Articles\")\n",
    "        news_text_ = st.text_area('Enter News URL Here', 'Paste URL Here')\n",
    "        model_choice = st.selectbox('Choose Model', ['LR', 'RFOREST', 'NB', 'DECISION_TREE'])\n",
    "\n",
    "        if st.button('Classify'):\n",
    "            news_text = get_article_details(news_text_)\n",
    "            st.text('Original Text:\\n{}'.format(news_text))\n",
    "            vect_text = news_cv.transform([news_text]).toarray()\n",
    "\n",
    "            if model_choice == 'LR':\n",
    "                predictor = load_prediction_models('models/newsclassifier_Logit_model.pkl')\n",
    "                prediction = predictor.predict(vect_text)\n",
    "            elif model_choice == 'RFOREST':\n",
    "                predictor = load_prediction_models('models/newsclassifier_RFOREST_model.pkl')\n",
    "                prediction = predictor.predict(vect_text)\n",
    "            elif model_choice == 'NB':\n",
    "                predictor = load_prediction_models('models/newsclassifier_NB_model.pkl')\n",
    "                prediction = predictor.predict(vect_text)\n",
    "            elif model_choice == 'DECISION_TREE':\n",
    "                predictor = load_prediction_models('models/newsclassifier_CART_model.pkl')\n",
    "                prediction = predictor.predict(vect_text)\n",
    "\n",
    "            final_result = get_key(prediction, prediction_labels)\n",
    "            st.success('News Categorized as: {}'.format(final_result))\n",
    "\n",
    "    elif choice == 'NLP':\n",
    "        st.info('Natural Language Processing of Text')\n",
    "        raw_text_ = st.text_area('Enter News URL Here', 'Paste URL Here')\n",
    "        nlp_task = ['Tokenization', 'Lemmatization', 'NER', 'POS Tags']\n",
    "        task_choice = st.selectbox('Choose NLP Task', nlp_task)\n",
    "\n",
    "        if st.button('Analyze'):\n",
    "            raw_text = get_article_details(raw_text_)\n",
    "            st.info('Original Text:\\n{}'.format(raw_text))\n",
    "\n",
    "            docx = nlp(raw_text)\n",
    "\n",
    "            if task_choice == 'Tokenization':\n",
    "                result = [token.text for token in docx]\n",
    "            elif task_choice == 'Lemmatization':\n",
    "                result = [\"'Token':{},'Lemma':{}\".format(token.text, token.lemma_) for token in docx]\n",
    "            elif task_choice == 'NER':\n",
    "                result = [(entity.text, entity.label_) for entity in docx.ents]\n",
    "            elif task_choice == 'POS Tags':\n",
    "                result = [\"'Token':{},'POS':{},'Dependency':{}\".format(word.text, word.tag_, word.dep_) for word in docx]\n",
    "\n",
    "            st.json(result)\n",
    "\n",
    "        if st.button('Tabulize'):\n",
    "            raw_text = get_article_details(raw_text_)\n",
    "            docx = nlp(raw_text)\n",
    "            c_tokens = [token.text for token in docx]\n",
    "            c_lemma = [token.lemma_ for token in docx]\n",
    "            c_pos = [token.pos_ for token in docx]\n",
    "\n",
    "            new_df = pd.DataFrame(zip(c_tokens, c_lemma, c_pos), columns=['Tokens', 'Lemma', 'POS'])\n",
    "            st.dataframe(new_df)\n",
    "\n",
    "        if st.checkbox('WordCloud'):\n",
    "            raw_text = get_article_details(raw_text_)\n",
    "            c_text = raw_text\n",
    "            wordcloud = WordCloud().generate(c_text)\n",
    "            plt.imshow(wordcloud, interpolation='bilinear')\n",
    "            plt.axis('off')\n",
    "            st.pyplot()\n",
    "\n",
    "    st.sidebar.subheader('About')\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f37007ff-ec05-4f23-9e07-71d26bd1e133",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
