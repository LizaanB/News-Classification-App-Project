{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3e96f0f4-c81c-4d9a-8129-cdc4401b1f00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pip in c:\\users\\lizaa\\anaconda3\\lib\\site-packages (24.2)\n",
      "Collecting pip\n",
      "  Downloading pip-24.3.1-py3-none-any.whl.metadata (3.7 kB)\n",
      "Downloading pip-24.3.1-py3-none-any.whl (1.8 MB)\n",
      "   ---------------------------------------- 0.0/1.8 MB ? eta -:--:--\n",
      "   ----------- ---------------------------- 0.5/1.8 MB 17.5 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 1.8/1.8 MB 7.2 MB/s eta 0:00:00\n",
      "Installing collected packages: pip\n",
      "  Attempting uninstall: pip\n",
      "    Found existing installation: pip 24.2\n",
      "    Uninstalling pip-24.2:\n",
      "      Successfully uninstalled pip-24.2\n",
      "Successfully installed pip-24.3.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade pip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed12d775-d397-4f71-9934-17babfb47dbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "            'tech': 1,\n",
    "            'sport': 2,\n",
    "            'health': 3,\n",
    "            'politics': 4,\n",
    "            'entertainment': 5,\n",
    "            }\n",
    "        if st.button('Classify'):\n",
    "            news_text = get_article_details(news_text_)\n",
    "            st.text('Original Text::\\n{}'.format(news_text))\n",
    "            vect_text = news_cv.transform([news_text]).toarray()\n",
    "            if model_choice == 'LR':\n",
    "                predictor = \\\n",
    "                    load_prediction_models('models/newsclassifier_Logit_model.pkl'\n",
    "                        )\n",
    "                prediction = predictor.predict(vect_text)\n",
    "            elif model_choice == 'RFOREST':\n",
    "\n",
    "                # st.write(prediction)\n",
    "\n",
    "                predictor = \\\n",
    "                    load_prediction_models('models/newsclassifier_RFOREST_model.pkl'\n",
    "                        )\n",
    "                prediction = predictor.predict(vect_text)\n",
    "            elif model_choice == 'NB':\n",
    "\n",
    "                # st.write(prediction)\n",
    "\n",
    "                predictor = \\\n",
    "                    load_prediction_models('models/newsclassifier_NB_model.pkl'\n",
    "                        )\n",
    "                prediction = predictor.predict(vect_text)\n",
    "            elif model_choice == 'DECISION_TREE':\n",
    "\n",
    "                # st.write(prediction)\n",
    "\n",
    "                predictor = \\\n",
    "                    load_prediction_models('models/newsclassifier_CART_model.pkl'\n",
    "                        )\n",
    "                prediction = predictor.predict(vect_text)\n",
    "\n",
    "                # st.write(prediction)\n",
    "\n",
    "            final_result = get_key(prediction, prediction_labels)\n",
    "            st.success('News Categorized as:: {}'.format(final_result))\n",
    "\n",
    "    if choice == 'NLP':\n",
    "        st.info('Natural Language Processing of Text')\n",
    "        raw_text_ = st.text_area('Enter News URL Here', 'Paste URL Here')\n",
    "        nlp_task = ['Tokenization', 'Lemmatization', 'NER', 'POS Tags']\n",
    "        task_choice = st.selectbox('Choose NLP Task', nlp_task)\n",
    "        if st.button('Analyze'):\n",
    "            raw_text = get_article_details(raw_text_)\n",
    "            st.info('Original Text::\\n{}'.format(raw_text))\n",
    "\n",
    "            docx = nlp(raw_text)\n",
    "            if task_choice == 'Tokenization':\n",
    "                result = [token.text for token in docx]\n",
    "            elif task_choice == 'Lemmatization':\n",
    "                result = [\"'Token':{},'Lemma':{}\".format(token.text,\n",
    "                          token.lemma_) for token in docx]\n",
    "            elif task_choice == 'NER':\n",
    "                result = [(entity.text, entity.label_) for entity in\n",
    "                          docx.ents]\n",
    "            elif task_choice == 'POS Tags':\n",
    "                result = \\\n",
    "                    [\"'Token':{},'POS':{},'Dependency':{}\".format(word.text,\n",
    "                     word.tag_, word.dep_) for word in docx]\n",
    "\n",
    "            st.json(result)\n",
    "\n",
    "        if st.button('Tabulize'):\n",
    "            raw_text = get_article_details(raw_text_)\n",
    "            docx = nlp(raw_text)\n",
    "            c_tokens = [token.text for token in docx]\n",
    "            c_lemma = [token.lemma_ for token in docx]\n",
    "            c_pos = [token.pos_ for token in docx]\n",
    "\n",
    "            new_df = pd.DataFrame(zip(c_tokens, c_lemma, c_pos),\n",
    "                                  columns=['Tokens', 'Lemma', 'POS'])\n",
    "            st.dataframe(new_df)\n",
    "\n",
    "        if st.checkbox('WordCloud'):\n",
    "            raw_text = get_article_details(raw_text_)\n",
    "            c_text = raw_text\n",
    "            wordcloud = WordCloud().generate(c_text)\n",
    "            plt.imshow(wordcloud, interpolation='bilinear')\n",
    "            plt.axis('off')\n",
    "            st.pyplot()\n",
    "\n",
    "    st.sidebar.subheader('About')\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
